import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.time.LocalDate;
import java.time.Period;
import java.time.format.DateTimeFormatter;
import java.util.*;

class Pessoa {
    private String nome;
    private LocalDate dataNascimento;

    public Pessoa(String nome, LocalDate dataNascimento) {
        this.nome = nome;
        this.dataNascimento = dataNascimento;
    }

    public String getNome() { return nome; }
    public LocalDate getDataNascimento() { return dataNascimento; }
}

class Funcionario extends Pessoa {
    private BigDecimal salario;
    private String funcao;

    public Funcionario(String nome, LocalDate dataNascimento, BigDecimal salario, String funcao) {
        super(nome, dataNascimento);
        this.salario = salario;
        this.funcao = funcao;
    }

    public BigDecimal getSalario() { return salario; }
    public void setSalario(BigDecimal salario) { this.salario = salario; }
    public String getFuncao() { return funcao; }
}

public class principal {
    private static final DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MM/yyyy");
    private static final DecimalFormat df = new DecimalFormat("#,##0.00", new DecimalFormatSymbols(new Locale("pt", "BR")));
    private static final BigDecimal SALARIO_MINIMO = new BigDecimal("1212.00");

    public static void main(String[] args) {
        List<Funcionario> funcionarios = new ArrayList<>();

        // 3.1 Inserir funcionários
        funcionarios.add(new Funcionario("Maria", LocalDate.of(2000, 10, 18), new BigDecimal("2009.44"), "Operador"));
        funcionarios.add(new Funcionario("João", LocalDate.of(1990, 5, 12), new BigDecimal("2284.38"), "Operador"));
        funcionarios.add(new Funcionario("Caio", LocalDate.of(1961, 5, 2), new BigDecimal("9836.14"), "Coordenador"));
        funcionarios.add(new Funcionario("Miguel", LocalDate.of(1988, 10, 14), new BigDecimal("19119.88"), "Diretor"));
        funcionarios.add(new Funcionario("Alice", LocalDate.of(1995, 1, 5), new BigDecimal("2234.68"), "Recepcionista"));
        funcionarios.add(new Funcionario("Heitor", LocalDate.of(1999, 11, 19), new BigDecimal("1582.72"), "Operador"));
        funcionarios.add(new Funcionario("Arthur", LocalDate.of(1993, 3, 31), new BigDecimal("4071.84"), "Contador"));
        funcionarios.add(new Funcionario("Laura", LocalDate.of(1994, 7, 8), new BigDecimal("3017.45"), "Gerente"));
        funcionarios.add(new Funcionario("Heloísa", LocalDate.of(2003, 5, 24), new BigDecimal("1606.85"), "Eletricista"));
        funcionarios.add(new Funcionario("Helena", LocalDate.of(1996, 9, 2), new BigDecimal("2799.93"), "Gerente"));

        // 3.2 Remover João
        for (int i = 0; i < funcionarios.size(); i++) {
            if (funcionarios.get(i).getNome().equals("João")) {
                funcionarios.remove(i);
                break;
            }
        }

        // 3.3 Imprimir todos os funcionários
        System.out.println("\nLista de funcionários:");
        for (Funcionario f : funcionarios) {
            System.out.println(f.getNome() + " | " +
                    f.getDataNascimento().format(dtf) + " | " +
                    df.format(f.getSalario()) + " | " +
                    f.getFuncao());
        }

        // 3.4 Aumentar 10% do salário
        for (Funcionario f : funcionarios) {
            BigDecimal novoSalario = f.getSalario().multiply(new BigDecimal("1.10"));
            f.setSalario(novoSalario);
        }

        System.out.println("\nLista com salários reajustados:");
        for (Funcionario f : funcionarios) {
            System.out.println(f.getNome() + " | " + df.format(f.getSalario()));
        }

        // 3.5 Agrupar por função (sem streams)
        Map<String, List<Funcionario>> agrupados = new HashMap<>();
        for (Funcionario f : funcionarios) {
            if (!agrupados.containsKey(f.getFuncao())) {
                agrupados.put(f.getFuncao(), new ArrayList<>());
            }
            agrupados.get(f.getFuncao()).add(f);
        }

        // 3.6 Imprimir agrupados
        System.out.println("\nFuncionários agrupados por função:");
        for (String funcao : agrupados.keySet()) {
            System.out.println("Função: " + funcao);
            for (Funcionario f : agrupados.get(funcao)) {
                System.out.println(" - " + f.getNome());
            }
        }

        // 3.8 Aniversariantes em outubro e dezembro
        System.out.println("\nAniversariantes de Outubro e Dezembro:");
        for (Funcionario f : funcionarios) {
            int mes = f.getDataNascimento().getMonthValue();
            if (mes == 10 || mes == 12) {
                System.out.println(f.getNome());
            }
        }

        // 3.9 Mais velho
        Funcionario maisVelho = funcionarios.get(0);
        for (Funcionario f : funcionarios) {
            if (f.getDataNascimento().isBefore(maisVelho.getDataNascimento())) {
                maisVelho = f;
            }
        }
        int idade = Period.between(maisVelho.getDataNascimento(), LocalDate.now()).getYears();
        System.out.println("\nMais velho: " + maisVelho.getNome() + " - " + idade + " anos");

        // 3.10 Ordem alfabética
        funcionarios.sort(Comparator.comparing(Funcionario::getNome));
        System.out.println("\nFuncionários em ordem alfabética:");
        for (Funcionario f : funcionarios) {
            System.out.println(f.getNome());
        }

        // 3.11 Total dos salários
        BigDecimal totalSalarios = BigDecimal.ZERO;
        for (Funcionario f : funcionarios) {
            totalSalarios = totalSalarios.add(f.getSalario());
        }
        System.out.println("\nTotal salários: " + df.format(totalSalarios));

 
        // 3.12 Quantos salários mínimos cada um ganha
        // Este critério, não consegui achar uma fórma de aplicar em java como realizar o comparativo do salário do funcionário com o salário minimo.       }
    }
}
